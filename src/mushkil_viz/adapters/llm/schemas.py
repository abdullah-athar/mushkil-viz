"""Schemas for LLM analyzer module."""
from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field


class AnalysisFunction(BaseModel):
    """Schema for an analysis function generated by the LLM."""
    name: str = Field(..., description="Name of the analysis function")
    description: str = Field(..., description="Detailed description of what the function does")
    parameters: Dict[str, Any] = Field(..., description="Parameters required by the function")
    returns: Dict[str, Any] = Field(..., description="Return type and description")
    code: str = Field(..., description="The actual Python code for the function")

    def get_signature(self) -> str:
        """Returns a readable function signature"""
        params = ", ".join([f"{k}: {v['type']}" for k, v in self.parameters.items()])
        return f"{self.name}({params}) -> {self.returns['type']}"

    def __str__(self) -> str:
        """Returns a readable string representation"""
        return f"Function: {self.get_signature()}\nDescription: {self.description}\n"


class AnalysisResult(BaseModel):
    """Schema for the result of an analysis function."""
    name: str = Field(..., description="Name of the analysis that was performed")
    description: str = Field(..., description="Description of the analysis")
    result: Dict[str, Any] = Field(..., description="The results of the analysis")
    visualization_hints: Optional[Dict[str, str]] = Field(
        None, description="Hints for how to visualize this result"
    )


class DatasetContext(BaseModel):
    """Schema for dataset context information."""
    column_types: Dict[str, List[str]] = Field(..., description="Mapping of column types to column names")
    sample_data: Dict[str, List[Any]] = Field(..., description="Sample values from each column")
    basic_stats: Dict[str, Dict[str, float]] = Field(..., description="Basic statistical measures for numeric columns")
    column_descriptions: Dict[str, str] = Field(..., description="Description of what each column represents")


class AnalysisPlan(BaseModel):
    """Schema for the complete analysis plan from the LLM."""
    functions: List[AnalysisFunction] = Field(..., description="List of analysis functions to execute")


class DataTransformation(BaseModel):
    """Model for data transformation specifications."""
    operation: str = Field(..., description="Type of transformation (groupby, sort, filter, datetime)")
    columns: Optional[List[str]] = Field(None, description="Columns to operate on")
    aggregation: Optional[str] = Field(None, description="Aggregation function for groupby")
    column: Optional[str] = Field(None, description="Column for sort/filter operations")
    ascending: Optional[bool] = Field(True, description="Sort direction")
    condition: Optional[str] = Field(None, description="Filter condition")
    unit: Optional[str] = Field(None, description="Time unit for datetime operations")


class VisualizationData(BaseModel):
    """Model for visualization data specifications."""
    x: Optional[str] = Field(None, description="Column for x-axis")
    y: Optional[str] = Field(None, description="Column for y-axis")
    z: Optional[str] = Field(None, description="Column for z-axis (heatmaps)")
    color: Optional[str] = Field(None, description="Column for color mapping")
    size: Optional[str] = Field(None, description="Column for size mapping")
    transformations: Optional[List[DataTransformation]] = Field(None, description="Data transformations to apply")


class VisualizationLayout(BaseModel):
    """Model for visualization layout specifications."""
    title: str = Field(..., description="Plot title")
    xaxis_title: Optional[str] = Field(None, description="X-axis label")
    yaxis_title: Optional[str] = Field(None, description="Y-axis label")
    zaxis_title: Optional[str] = Field(None, description="Z-axis label")


class VisualizationSpec(BaseModel):
    """Model for complete visualization specification."""
    id: str = Field(..., description="Unique identifier for the visualization")
    type: str = Field(..., description="Type of plot (bar, line, scatter, etc.)")
    title: str = Field(..., description="Title of the visualization")
    description: str = Field(..., description="Description of what the visualization shows")
    data: VisualizationData = Field(..., description="Data specification")
    layout: VisualizationLayout = Field(..., description="Layout specification")


class VisualizationResponse(BaseModel):
    """Model for LLM response containing visualization specifications."""
    visualizations: List[VisualizationSpec] = Field(..., description="List of visualization specifications")


FUNCTION_SCHEMA = {
    "type": "function",
    "function": {
        "name": "provide_analysis_plan",
        "description": "Generate analysis functions based on the dataset context",
        "parameters": {
            "type": "object",
            "properties": {
                "functions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the analysis function"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of what the function does"
                            },
                            "parameters": {
                                "type": "object",
                                "description": "Parameters required by the function",
                                "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "description": "Parameter type"
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "Parameter description"
                                        }
                                    },
                                    "required": ["type", "description"]
                                }
                            },
                            "returns": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "description": "Return type"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Description of the return value"
                                    }
                                },
                                "required": ["type", "description"]
                            },
                            "code": {
                                "type": "string",
                                "description": "The actual Python code for the function"
                            }
                        },
                        "required": ["name", "description", "parameters", "returns", "code"]
                    }
                }
            },
            "required": ["functions"]
        }
    }
}

# Validation functions
def validate_visualization_spec(spec: Dict) -> VisualizationSpec:
    """Validate a single visualization specification."""
    return VisualizationSpec(**spec)

def validate_visualization_response(response: Dict) -> VisualizationResponse:
    """Validate complete visualization response from LLM."""
    return VisualizationResponse(**response) 